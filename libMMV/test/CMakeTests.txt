cmake_minimum_required(VERSION 3.10)

include(CommonFlags)
include(GetSourceFiles)

add_definitions(/D_USE_MATH_DEFINES)
add_definitions(/DTESTDATA_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}\")

set(LIBMMV_UNIT_TEST_NAME libmmvUnitTest)
project(${LIBMMV_UNIT_TEST_NAME})

# find all directories containing source files
set(TEST_SOURCE_DIR "src/unit")
set(FILE_TYPES *.c *.cpp *.h *.hpp)
find_directories(DIRS ${TEST_SOURCE_DIR} "${FILE_TYPES}")
generate_source_tree(HOST_SOURCES "${DIRS}" "${FILE_TYPES}")
add_executable(${LIBMMV_UNIT_TEST_NAME} ${HOST_SOURCES})

set(MMV_TEST_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src")
target_include_directories(
		${LIBMMV_UNIT_TEST_NAME} 
		PRIVATE 
		"${MMV_TEST_INCLUDE_DIR}" 
		"${LIBMMV_INCLUDE_DIR}" 
		"${FREEIMAGEPLUS_INCLUDE_PATH}"
)
		
target_link_libraries(
	${LIBMMV_UNIT_TEST_NAME} 
	PRIVATE 
	${LIBMMV_LIBRARY_NAME} 
	gtest 
	"${FREEIMAGEPLUS_LIBRARIES}"
)

if(CMAKE_COMPILER_IS_GNUCC)
	target_link_libraries(${PROJECT_NAME} PRIVATE pthread)

    # if gcc version <9 we also need to link the stdc++fs library to support c++17's filesystem extension
    IF (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 9.0)
        target_link_libraries(${PROJECT_NAME} PRIVATE stdc++fs)
    ENDIF()
endif(CMAKE_COMPILER_IS_GNUCC)

if(MSVC)
    add_custom_command(TARGET ${LIBMMV_UNIT_TEST_NAME} POST_BUILD
                        COMMAND ${CMAKE_COMMAND} -E copy
                                "${FREEIMAGE_ROOT_DIR}/x64/FreeImage.dll"
                                "${FREEIMAGE_ROOT_DIR}/x64/FreeImagePlus.dll"
                                "${CMAKE_BINARY_DIR}/bin/$<CONFIG>/")
endif(MSVC)